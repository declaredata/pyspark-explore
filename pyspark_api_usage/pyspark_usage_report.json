{
  "total_files_analyzed": 12,
  "total_matches": 59,
  "matches": [
    {
      "function": "join",
      "file": "../utils/fuse_bench/.venv/bin/activate_this.py",
      "line": 47,
      "column": 21,
      "context": "\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"fuse_bench\" or os.path.basename(base)  # noqa: SIM222"
    },
    {
      "function": "split",
      "file": "../utils/fuse_bench/.venv/bin/activate_this.py",
      "line": 53,
      "column": 11,
      "context": "# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)"
    },
    {
      "function": "join",
      "file": "../utils/fuse_bench/.venv/bin/activate_this.py",
      "line": 54,
      "column": 28,
      "context": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.12/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]"
    },
    {
      "function": "split",
      "file": "../utils/fuse_bench/.venv/bin/activate_this.py",
      "line": 47,
      "column": 48,
      "context": "\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"fuse_bench\" or os.path.basename(base)  # noqa: SIM222"
    },
    {
      "function": "get",
      "file": "../utils/fuse_bench/.venv/bin/activate_this.py",
      "line": 47,
      "column": 48,
      "context": "\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"fuse_bench\" or os.path.basename(base)  # noqa: SIM222"
    },
    {
      "function": "join",
      "file": "../utils/fuse_bench/.venv/lib/python3.12/site-packages/_virtualenv.py",
      "line": 6,
      "column": 24,
      "context": "import sys\n\nVIRTUALENV_PATCH_FILE = os.path.join(__file__)\n\n"
    },
    {
      "function": "append",
      "file": "../utils/fuse_bench/.venv/lib/python3.12/site-packages/_virtualenv.py",
      "line": 62,
      "column": 16,
      "context": "                # - that every thread will use - into .lock[0].\n                # https://docs.python.org/3/faq/library.html#what-kinds-of-global-value-mutation-are-thread-safe\n                self.lock.append(lock)\n\n            from functools import partial"
    },
    {
      "function": "rowsBetween",
      "file": "../utils/fuse_bench/src/fuse_bench/window.py",
      "line": 34,
      "column": 18,
      "context": "def cases(orig_df: DataFrame) -> list[TestCaseResult]:\n    ret: list[TestCaseResult] = []\n    window_spec = Window.orderBy(\"violent_crime\").rowsBetween(\n        Window.unboundedPreceding, 2\n    )"
    },
    {
      "function": "append",
      "file": "../utils/fuse_bench/src/fuse_bench/window.py",
      "line": 37,
      "column": 4,
      "context": "        Window.unboundedPreceding, 2\n    )\n    ret.append(\n        TestCaseResult(\n            description=\"running total of violent crimes\","
    },
    {
      "function": "rowsBetween",
      "file": "../utils/fuse_bench/src/fuse_bench/window.py",
      "line": 45,
      "column": 18,
      "context": "        )\n    )\n    window_spec = Window.orderBy(\"state_abbr\").rowsBetween(\n        Window.unboundedPreceding,\n        10,"
    },
    {
      "function": "append",
      "file": "../utils/fuse_bench/src/fuse_bench/window.py",
      "line": 49,
      "column": 4,
      "context": "        10,\n    )\n    ret.append(\n        TestCaseResult(\n            description=\"crimes per state\","
    },
    {
      "function": "csv",
      "file": "../utils/fuse_bench/src/fuse_bench/window.py",
      "line": 20,
      "column": 17,
      "context": "\n        def run() -> list[TestCaseResult]:\n            df = fuse.read.csv(file_name=csv_file)\n            windowed_dataframes = cases(df)\n            # need this in place so that we actually process all the data"
    },
    {
      "function": "orderBy",
      "file": "../utils/fuse_bench/src/fuse_bench/window.py",
      "line": 34,
      "column": 18,
      "context": "def cases(orig_df: DataFrame) -> list[TestCaseResult]:\n    ret: list[TestCaseResult] = []\n    window_spec = Window.orderBy(\"violent_crime\").rowsBetween(\n        Window.unboundedPreceding, 2\n    )"
    },
    {
      "function": "orderBy",
      "file": "../utils/fuse_bench/src/fuse_bench/window.py",
      "line": 45,
      "column": 18,
      "context": "        )\n    )\n    window_spec = Window.orderBy(\"state_abbr\").rowsBetween(\n        Window.unboundedPreceding,\n        10,"
    },
    {
      "function": "withColumn",
      "file": "../utils/fuse_bench/src/fuse_bench/window.py",
      "line": 40,
      "column": 22,
      "context": "        TestCaseResult(\n            description=\"running total of violent crimes\",\n            dataframe=orig_df.withColumn(\n                \"running_total_violent_crime\", F.sum(\"violent_crime\").over(window_spec)\n            ),"
    },
    {
      "function": "withColumn",
      "file": "../utils/fuse_bench/src/fuse_bench/window.py",
      "line": 52,
      "column": 22,
      "context": "        TestCaseResult(\n            description=\"crimes per state\",\n            dataframe=orig_df.withColumn(\n                \"running_total_state_abbr\", F.sum(\"year\").over(window_spec)\n            ),"
    },
    {
      "function": "over",
      "file": "../utils/fuse_bench/src/fuse_bench/window.py",
      "line": 41,
      "column": 47,
      "context": "            description=\"running total of violent crimes\",\n            dataframe=orig_df.withColumn(\n                \"running_total_violent_crime\", F.sum(\"violent_crime\").over(window_spec)\n            ),\n        )"
    },
    {
      "function": "over",
      "file": "../utils/fuse_bench/src/fuse_bench/window.py",
      "line": 53,
      "column": 44,
      "context": "            description=\"crimes per state\",\n            dataframe=orig_df.withColumn(\n                \"running_total_state_abbr\", F.sum(\"year\").over(window_spec)\n            ),\n        )"
    },
    {
      "function": "sum",
      "file": "../utils/fuse_bench/src/fuse_bench/window.py",
      "line": 41,
      "column": 47,
      "context": "            description=\"running total of violent crimes\",\n            dataframe=orig_df.withColumn(\n                \"running_total_violent_crime\", F.sum(\"violent_crime\").over(window_spec)\n            ),\n        )"
    },
    {
      "function": "sum",
      "file": "../utils/fuse_bench/src/fuse_bench/window.py",
      "line": 53,
      "column": 44,
      "context": "            description=\"crimes per state\",\n            dataframe=orig_df.withColumn(\n                \"running_total_state_abbr\", F.sum(\"year\").over(window_spec)\n            ),\n        )"
    },
    {
      "function": "option",
      "file": "../utils/fuse_bench/src/fuse_bench/main.py",
      "line": 29,
      "column": 1,
      "context": "\n@click.command()\n@click.option(\n    \"--verbose\",\n    default=False,"
    },
    {
      "function": "run",
      "file": "../utils/fuse_bench/src/fuse_bench/main.py",
      "line": 89,
      "column": 4,
      "context": "\nif __name__ == \"__main__\":\n    run()"
    },
    {
      "function": "limit",
      "file": "../utils/fuse_bench/src/fuse_bench/main.py",
      "line": 48,
      "column": 18,
      "context": "    with sql_api(file) as (df1, elapsed):\n        if verbose:\n            print(df1.limit(0, 10).pretty_print())\n        print(f\"[{description}] SQL API test took {elapsed} sec\")\n"
    },
    {
      "function": "limit",
      "file": "../utils/fuse_bench/src/fuse_bench/main.py",
      "line": 54,
      "column": 18,
      "context": "    with df_api(file) as (df2, elapsed):\n        if verbose:\n            print(df2.limit(0, 10).pretty_print())\n        print(f\"[{description}] DF API took {elapsed} sec\")\n"
    },
    {
      "function": "limit",
      "file": "../utils/fuse_bench/src/fuse_bench/basic_df.py",
      "line": 17,
      "column": 17,
      "context": "\n        def run():\n            df = fuse.read.csv(file_name=csv_file).limit(0, 1000)\n            df.export_csv()\n            return df"
    },
    {
      "function": "csv",
      "file": "../utils/fuse_bench/src/fuse_bench/basic_df.py",
      "line": 17,
      "column": 17,
      "context": "\n        def run():\n            df = fuse.read.csv(file_name=csv_file).limit(0, 1000)\n            df.export_csv()\n            return df"
    },
    {
      "function": "csv",
      "file": "../utils/fuse_bench/src/fuse_bench/basic_sql.py",
      "line": 18,
      "column": 17,
      "context": "        def run() -> DataFrame:\n            table_name = \"simplebenchsql\"\n            df = fuse.read.csv(file_name=csv_file)\n            df.write.saveAsTable(table_name)\n            df = fuse.sql(query=f\"SELECT * FROM {table_name}\")"
    },
    {
      "function": "saveAsTable",
      "file": "../utils/fuse_bench/src/fuse_bench/basic_sql.py",
      "line": 19,
      "column": 12,
      "context": "            table_name = \"simplebenchsql\"\n            df = fuse.read.csv(file_name=csv_file)\n            df.write.saveAsTable(table_name)\n            df = fuse.sql(query=f\"SELECT * FROM {table_name}\")\n            # need this in place so that we actually process all the data"
    },
    {
      "function": "sql",
      "file": "../utils/fuse_bench/src/fuse_bench/basic_sql.py",
      "line": 20,
      "column": 17,
      "context": "            df = fuse.read.csv(file_name=csv_file)\n            df.write.saveAsTable(table_name)\n            df = fuse.sql(query=f\"SELECT * FROM {table_name}\")\n            # need this in place so that we actually process all the data\n            # in the dataframe. otherwise we'll just end up timing the lazy"
    },
    {
      "function": "func",
      "file": "../utils/fuse_bench/src/fuse_bench/timing.py",
      "line": 15,
      "column": 13,
      "context": "    \"\"\"\n    start_time = time.perf_counter()\n    result = func()\n    end_time = time.perf_counter()\n    elapsed_time = end_time - start_time"
    },
    {
      "function": "groupBy",
      "file": "../utils/fuse_bench/src/fuse_bench/agg.py",
      "line": 36,
      "column": 14,
      "context": "\n    # homicides per state\n    grouped = orig_df.groupBy(\"state_abbr\")\n    aliased_col = F.count(\"homicide\").alias(\"total_homicides\")\n    ret.append("
    },
    {
      "function": "alias",
      "file": "../utils/fuse_bench/src/fuse_bench/agg.py",
      "line": 37,
      "column": 18,
      "context": "    # homicides per state\n    grouped = orig_df.groupBy(\"state_abbr\")\n    aliased_col = F.count(\"homicide\").alias(\"total_homicides\")\n    ret.append(\n        TestCaseResult("
    },
    {
      "function": "append",
      "file": "../utils/fuse_bench/src/fuse_bench/agg.py",
      "line": 38,
      "column": 4,
      "context": "    grouped = orig_df.groupBy(\"state_abbr\")\n    aliased_col = F.count(\"homicide\").alias(\"total_homicides\")\n    ret.append(\n        TestCaseResult(\n            description=\"homicides per state\", dataframe=grouped.agg(aliased_col)"
    },
    {
      "function": "groupBy",
      "file": "../utils/fuse_bench/src/fuse_bench/agg.py",
      "line": 45,
      "column": 14,
      "context": "\n    # number of crimes per year\n    grouped = orig_df.groupBy(\"year\")\n    aliased_col = F.count(\"year\").alias(\"total_num_crimes\")\n    ret.append("
    },
    {
      "function": "alias",
      "file": "../utils/fuse_bench/src/fuse_bench/agg.py",
      "line": 46,
      "column": 18,
      "context": "    # number of crimes per year\n    grouped = orig_df.groupBy(\"year\")\n    aliased_col = F.count(\"year\").alias(\"total_num_crimes\")\n    ret.append(\n        TestCaseResult("
    },
    {
      "function": "append",
      "file": "../utils/fuse_bench/src/fuse_bench/agg.py",
      "line": 47,
      "column": 4,
      "context": "    grouped = orig_df.groupBy(\"year\")\n    aliased_col = F.count(\"year\").alias(\"total_num_crimes\")\n    ret.append(\n        TestCaseResult(\n            description=\"number of crimes per year\", dataframe=grouped.agg(aliased_col)"
    },
    {
      "function": "csv",
      "file": "../utils/fuse_bench/src/fuse_bench/agg.py",
      "line": 20,
      "column": 17,
      "context": "\n        def run():\n            df = fuse.read.csv(file_name=csv_file)\n            test_cases = cases(df)\n            # need this in place so that we actually process all the data"
    },
    {
      "function": "count",
      "file": "../utils/fuse_bench/src/fuse_bench/agg.py",
      "line": 37,
      "column": 18,
      "context": "    # homicides per state\n    grouped = orig_df.groupBy(\"state_abbr\")\n    aliased_col = F.count(\"homicide\").alias(\"total_homicides\")\n    ret.append(\n        TestCaseResult("
    },
    {
      "function": "count",
      "file": "../utils/fuse_bench/src/fuse_bench/agg.py",
      "line": 46,
      "column": 18,
      "context": "    # number of crimes per year\n    grouped = orig_df.groupBy(\"year\")\n    aliased_col = F.count(\"year\").alias(\"total_num_crimes\")\n    ret.append(\n        TestCaseResult("
    },
    {
      "function": "agg",
      "file": "../utils/fuse_bench/src/fuse_bench/agg.py",
      "line": 40,
      "column": 57,
      "context": "    ret.append(\n        TestCaseResult(\n            description=\"homicides per state\", dataframe=grouped.agg(aliased_col)\n        )\n    )"
    },
    {
      "function": "agg",
      "file": "../utils/fuse_bench/src/fuse_bench/agg.py",
      "line": 49,
      "column": 63,
      "context": "    ret.append(\n        TestCaseResult(\n            description=\"number of crimes per year\", dataframe=grouped.agg(aliased_col)\n        )\n    )"
    },
    {
      "function": "limit",
      "file": "../utils/fuse_bench/src/fuse_bench/test_case/printer.py",
      "line": 7,
      "column": 14,
      "context": "    for tcr in results:\n        print(f\"{tcr.description} (first 10):\")\n        print(tcr.dataframe.limit(0, 10).pretty_print())"
    },
    {
      "function": "append",
      "file": "../utils/fuse_bench/src/fuse_bench/sorts.py",
      "line": 38,
      "column": 4,
      "context": "    year_col = Column(name=\"year\")\n    sorted_df = orig_df.sort_typed(SortedColumn(year_col, SortDirection.ASC))\n    ret.append(\n        TestCaseResult(description=\"sort by year ascending\", dataframe=sorted_df)\n    )"
    },
    {
      "function": "filter",
      "file": "../utils/fuse_bench/src/fuse_bench/sorts.py",
      "line": 45,
      "column": 18,
      "context": "    state_col = Column(name=\"state_abbr\")\n    condition = Condition(state_col, \"==\", \"CA\")\n    filtered_df = orig_df.filter(condition)\n    ret.append(\n        TestCaseResult(description=\"filter California only\", dataframe=filtered_df)"
    },
    {
      "function": "append",
      "file": "../utils/fuse_bench/src/fuse_bench/sorts.py",
      "line": 46,
      "column": 4,
      "context": "    condition = Condition(state_col, \"==\", \"CA\")\n    filtered_df = orig_df.filter(condition)\n    ret.append(\n        TestCaseResult(description=\"filter California only\", dataframe=filtered_df)\n    )"
    },
    {
      "function": "append",
      "file": "../utils/fuse_bench/src/fuse_bench/sorts.py",
      "line": 53,
      "column": 4,
      "context": "    crime_col = Column(name=\"violent_crime\")\n    sorted_df = orig_df.sort_typed(SortedColumn(crime_col, SortDirection.DESC))\n    ret.append(\n        TestCaseResult(\n            description=\"sort by violent crime descending\", dataframe=sorted_df"
    },
    {
      "function": "filter",
      "file": "../utils/fuse_bench/src/fuse_bench/sorts.py",
      "line": 62,
      "column": 18,
      "context": "    year_col = Column(name=\"year\")\n    condition = Condition(year_col, \">\", 2010)\n    filtered_df = orig_df.filter(condition)\n    ret.append(TestCaseResult(description=\"filter years > 2010\", dataframe=filtered_df))\n"
    },
    {
      "function": "append",
      "file": "../utils/fuse_bench/src/fuse_bench/sorts.py",
      "line": 63,
      "column": 4,
      "context": "    condition = Condition(year_col, \">\", 2010)\n    filtered_df = orig_df.filter(condition)\n    ret.append(TestCaseResult(description=\"filter years > 2010\", dataframe=filtered_df))\n\n    # sort by property crime ascending"
    },
    {
      "function": "append",
      "file": "../utils/fuse_bench/src/fuse_bench/sorts.py",
      "line": 68,
      "column": 4,
      "context": "    crime_col = Column(name=\"property_crime\")\n    sorted_df = orig_df.sort_typed(SortedColumn(crime_col, SortDirection.ASC))\n    ret.append(\n        TestCaseResult(\n            description=\"sort by property crime ascending\", dataframe=sorted_df"
    },
    {
      "function": "groupBy",
      "file": "../utils/fuse_bench/src/fuse_bench/sorts.py",
      "line": 75,
      "column": 14,
      "context": "\n    # crime totals by state ordered by crime count\n    grouped = orig_df.groupBy(\"state_abbr\")\n    aliased_col = F.sum(\"violent_crime\").alias(\"total_crimes\")\n    ordered_group = grouped.agg(aliased_col).sort(col_name=\"total_crimes\", dir=\"desc\")"
    },
    {
      "function": "alias",
      "file": "../utils/fuse_bench/src/fuse_bench/sorts.py",
      "line": 76,
      "column": 18,
      "context": "    # crime totals by state ordered by crime count\n    grouped = orig_df.groupBy(\"state_abbr\")\n    aliased_col = F.sum(\"violent_crime\").alias(\"total_crimes\")\n    ordered_group = grouped.agg(aliased_col).sort(col_name=\"total_crimes\", dir=\"desc\")\n    ret.append("
    },
    {
      "function": "sort",
      "file": "../utils/fuse_bench/src/fuse_bench/sorts.py",
      "line": 77,
      "column": 20,
      "context": "    grouped = orig_df.groupBy(\"state_abbr\")\n    aliased_col = F.sum(\"violent_crime\").alias(\"total_crimes\")\n    ordered_group = grouped.agg(aliased_col).sort(col_name=\"total_crimes\", dir=\"desc\")\n    ret.append(\n        TestCaseResult("
    },
    {
      "function": "append",
      "file": "../utils/fuse_bench/src/fuse_bench/sorts.py",
      "line": 78,
      "column": 4,
      "context": "    aliased_col = F.sum(\"violent_crime\").alias(\"total_crimes\")\n    ordered_group = grouped.agg(aliased_col).sort(col_name=\"total_crimes\", dir=\"desc\")\n    ret.append(\n        TestCaseResult(\n            description=\"crime totals by state ordered by crime count\","
    },
    {
      "function": "limit",
      "file": "../utils/fuse_bench/src/fuse_bench/sorts.py",
      "line": 86,
      "column": 17,
      "context": "\n    # sort by property crime ascending on limited df\n    limited_df = orig_df.limit(210, 215)\n    sorted_df = limited_df.sort(\"property_crime\", \"asc\")\n    ret.append("
    },
    {
      "function": "sort",
      "file": "../utils/fuse_bench/src/fuse_bench/sorts.py",
      "line": 87,
      "column": 16,
      "context": "    # sort by property crime ascending on limited df\n    limited_df = orig_df.limit(210, 215)\n    sorted_df = limited_df.sort(\"property_crime\", \"asc\")\n    ret.append(\n        TestCaseResult("
    },
    {
      "function": "append",
      "file": "../utils/fuse_bench/src/fuse_bench/sorts.py",
      "line": 88,
      "column": 4,
      "context": "    limited_df = orig_df.limit(210, 215)\n    sorted_df = limited_df.sort(\"property_crime\", \"asc\")\n    ret.append(\n        TestCaseResult(\n            description=\"sort by property crime ascending on limited df\","
    },
    {
      "function": "csv",
      "file": "../utils/fuse_bench/src/fuse_bench/sorts.py",
      "line": 20,
      "column": 17,
      "context": "\n        def run():\n            df = fuse.read.csv(file_name=csv_file)\n            test_cases = cases(df)\n            # need this in place so that we actually process all the data"
    },
    {
      "function": "sum",
      "file": "../utils/fuse_bench/src/fuse_bench/sorts.py",
      "line": 76,
      "column": 18,
      "context": "    # crime totals by state ordered by crime count\n    grouped = orig_df.groupBy(\"state_abbr\")\n    aliased_col = F.sum(\"violent_crime\").alias(\"total_crimes\")\n    ordered_group = grouped.agg(aliased_col).sort(col_name=\"total_crimes\", dir=\"desc\")\n    ret.append("
    },
    {
      "function": "agg",
      "file": "../utils/fuse_bench/src/fuse_bench/sorts.py",
      "line": 77,
      "column": 20,
      "context": "    grouped = orig_df.groupBy(\"state_abbr\")\n    aliased_col = F.sum(\"violent_crime\").alias(\"total_crimes\")\n    ordered_group = grouped.agg(aliased_col).sort(col_name=\"total_crimes\", dir=\"desc\")\n    ret.append(\n        TestCaseResult("
    }
  ]
}